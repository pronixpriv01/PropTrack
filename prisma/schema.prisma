generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
  // uncomment next line if you use Prisma <5.10
  directUrl = env("DIRECT_URL")
}

enum UserRole {
  ADMIN
  USER
}

enum EventCategory {
  MEETING
  INTERVIEW
  DISCUSSION
  OTHER
}

enum  EventType {
  MONTHLY_MEETING
  DAILY_MEETING
  MID_YEAR_DISCUSSION
  OTHER
}

model User {
  id String @id @default(cuid())
  name String?
  email String? @unique
  emailVerified DateTime?
  image String?
  password String?
  role  UserRole @default(USER)
  accounts Account[]
  isTwoFactorEnabled Boolean @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  notifications Notification[]
  events Event[]
  participants Participant[]
  tasks Task[]
}

model Account {
  id String @id @default(cuid())
  userId String
  type String
  provider String
  providerAccountId String
  refresh_token String? @db.Text
  access_token String? @db.Text
  expires_at Int?
  token_type String?
  scopre String?
  id_token String? @db.Text
  session_state String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}



model VerificationToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}


model Notification {
  id String @id @default(cuid())
  userId String
  category String
  title String
  description String
  message String
  date DateTime @default(now())
  status String @default("unread") // Statuswerte: "unread", "read", "archived"

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Event {
  id String @id @default(cuid())
  title String
  description String?
  category EventCategory[]
  type EventType[]
  date DateTime @default(now())
  userId String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  tasks Task[]
  participants Participant[]
}

model Task {
  id String @id @default(cuid())
  title String
  description String?
  dueDate DateTime?
  eventId String
  userId String

  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Participant {
  id String @id @default(cuid())
  eventId String
  userId String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@unique([eventId, userId])
}

// model User {
//   userId   String   @id @default(auto()) @map("_id") @db.ObjectId
//   name     String
//   email    String   @unique
//   password String
//   role     String
//   properties Property[]
// }

// model Property {
//   propertyId      String  @id @default(auto()) @map("_id") @db.ObjectId
//   name            String
//   location        String
//   totalUnits      Int
//   vacantUnits     Int
//   occupiedUnits   Int
//   maintenanceUnits Int
//   userId          String  @db.ObjectId
//   user            User    @relation(fields: [userId], references: [userId])
//   units           Unit[]
//   tasks           Task[]
//   reports         Report[]
// }

// model Unit {
//   unitId     String @id @default(auto()) @map("_id") @db.ObjectId
//   propertyId String @db.ObjectId
//   property   Property @relation(fields: [propertyId], references: [propertyId])
//   status     String
//   tenantName String
//   rentAmount Float
//   tasks      Task[]
// }

// model Activity {
//   activityId  String @id @default(auto()) @map("_id") @db.ObjectId
//   taskId      String @db.ObjectId
//   task        Task @relation(fields: [taskId], references: [taskId])
//   date        DateTime
//   description String
// }

// model Report {
//   reportId    String @id @default(auto()) @map("_id") @db.ObjectId
//   propertyId  String @db.ObjectId
//   property    Property @relation(fields: [propertyId], references: [propertyId])
//   date        DateTime
//   type        String
//   income      Float
//   expenses    Float
// }
